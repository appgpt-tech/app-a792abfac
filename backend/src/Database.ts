//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { MessagesEntity } from './db/Messages.entity';
import { CallsEntity } from './db/Calls.entity';
import { MediaEntity } from './db/Media.entity';
import { LearningManagementSystemsEntity } from './db/LearningManagementSystems.entity';
import { UserPreferencesEntity } from './db/UserPreferences.entity';
import { ChatHistoryEntity } from './db/ChatHistory.entity';
import { ChatSettingsEntity } from './db/ChatSettings.entity';
import { ThemesEntity } from './db/Themes.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      MessagesEntity,
      CallsEntity,
      MediaEntity,
      LearningManagementSystemsEntity,
      UserPreferencesEntity,
      ChatHistoryEntity,
      ChatSettingsEntity,
      ThemesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Messages: [
        {
          send: 'send 1',
          upload: 'upload 1',
          attach: 'attach 1',
          image: 'image 1',
          id: 2,
        },
        {
          send: 'send 2',
          upload: 'upload 2',
          attach: 'attach 2',
          image: 'image 2',
          id: 83,
        },
        {
          send: 'send 3',
          upload: 'upload 3',
          attach: 'attach 3',
          image: 'image 3',
          id: 82,
        },
        {
          send: 'send 4',
          upload: 'upload 4',
          attach: 'attach 4',
          image: 'image 4',
          id: 64,
        },
        {
          send: 'send 5',
          upload: 'upload 5',
          attach: 'attach 5',
          image: 'image 5',
          id: 34,
        },
      ],
      Calls: [
        { callButton: false, id: 64 },
        { callButton: false, id: 76 },
        { callButton: false, id: 97 },
        { callButton: false, id: 4 },
        { callButton: true, id: 45 },
      ],
      Media: [
        {
          videoOrAudioUpload: 'videoOrAudioUpload 1',
          images: 'images 1',
          id: 94,
        },
        {
          videoOrAudioUpload: 'videoOrAudioUpload 2',
          images: 'images 2',
          id: 38,
        },
        {
          videoOrAudioUpload: 'videoOrAudioUpload 3',
          images: 'images 3',
          id: 96,
        },
        {
          videoOrAudioUpload: 'videoOrAudioUpload 4',
          images: 'images 4',
          id: 29,
        },
        {
          videoOrAudioUpload: 'videoOrAudioUpload 5',
          images: 'images 5',
          id: 57,
        },
      ],
      LearningManagementSystems: [
        {
          name: 'name 1',
          type: 'type 1',
          source: 'source 1',
          accessLevel: 'accessLevel 1',
          id: 36,
        },
        {
          name: 'name 2',
          type: 'type 2',
          source: 'source 2',
          accessLevel: 'accessLevel 2',
          id: 75,
        },
        {
          name: 'name 3',
          type: 'type 3',
          source: 'source 3',
          accessLevel: 'accessLevel 3',
          id: 75,
        },
        {
          name: 'name 4',
          type: 'type 4',
          source: 'source 4',
          accessLevel: 'accessLevel 4',
          id: 82,
        },
        {
          name: 'name 5',
          type: 'type 5',
          source: 'source 5',
          accessLevel: 'accessLevel 5',
          id: 69,
        },
      ],
      UserPreferences: [
        {
          sessionSetting: 'sessionSetting 1',
          llmResponse: 'llmResponse 1',
          id: 14,
        },
        {
          sessionSetting: 'sessionSetting 2',
          llmResponse: 'llmResponse 2',
          id: 63,
        },
        {
          sessionSetting: 'sessionSetting 3',
          llmResponse: 'llmResponse 3',
          id: 59,
        },
        {
          sessionSetting: 'sessionSetting 4',
          llmResponse: 'llmResponse 4',
          id: 40,
        },
        {
          sessionSetting: 'sessionSetting 5',
          llmResponse: 'llmResponse 5',
          id: 77,
        },
      ],
      ChatHistory: [
        { history: 'history 1', id: 57 },
        { history: 'history 2', id: 54 },
        { history: 'history 3', id: 78 },
        { history: 'history 4', id: 99 },
        { history: 'history 5', id: 67 },
      ],
      ChatSettings: [
        {
          notifications: true,
          autoDelete: 1,
          theme: 1,
          languagePreference: 'languagePreference 1',
          id: 70,
        },
        {
          notifications: false,
          autoDelete: 2,
          theme: 2,
          languagePreference: 'languagePreference 2',
          id: 31,
        },
        {
          notifications: true,
          autoDelete: 3,
          theme: 3,
          languagePreference: 'languagePreference 3',
          id: 82,
        },
        {
          notifications: false,
          autoDelete: 4,
          theme: 4,
          languagePreference: 'languagePreference 4',
          id: 13,
        },
        {
          notifications: true,
          autoDelete: 5,
          theme: 5,
          languagePreference: 'languagePreference 5',
          id: 49,
        },
      ],
      Themes: [
        { themeOption: 'themeOption 1', id: 34 },
        { themeOption: 'themeOption 2', id: 20 },
        { themeOption: 'themeOption 3', id: 99 },
        { themeOption: 'themeOption 4', id: 20 },
        { themeOption: 'themeOption 5', id: 59 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('MessagesEntity', data.Messages);
      await this.SeedResource('CallsEntity', data.Calls);
      await this.SeedResource('MediaEntity', data.Media);
      await this.SeedResource(
        'LearningManagementSystemsEntity',
        data.LearningManagementSystems,
      );
      await this.SeedResource('UserPreferencesEntity', data.UserPreferences);
      await this.SeedResource('ChatHistoryEntity', data.ChatHistory);
      await this.SeedResource('ChatSettingsEntity', data.ChatSettings);
      await this.SeedResource('ThemesEntity', data.Themes);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
